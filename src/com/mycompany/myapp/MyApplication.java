package com.mycompany.myapp;


import com.codename1.capture.Capture;
import com.codename1.components.Accordion;
import com.codename1.components.ImageViewer;
import com.codename1.components.MultiButton;
import com.codename1.components.ScaleImageLabel;
import com.codename1.components.SpanLabel;
import static com.codename1.ui.CN.*;
import com.codename1.ui.Display;
import com.codename1.ui.Form;
import com.codename1.ui.Dialog;
import com.codename1.ui.Label;
import com.codename1.ui.plaf.UIManager;
import com.codename1.ui.util.Resources;
import com.codename1.io.Log;
import com.codename1.ui.Toolbar;
import java.io.IOException;
import com.codename1.ui.layouts.BoxLayout;
import com.codename1.io.NetworkEvent;
import com.codename1.io.Preferences;
import com.codename1.ui.Button;
import com.codename1.ui.ComboBox;
import com.codename1.ui.Command;
import com.codename1.ui.Component;
import static com.codename1.ui.Component.CENTER;
import com.codename1.ui.Container;
import com.codename1.ui.Font;
import com.codename1.ui.FontImage;
import com.codename1.ui.Graphics;
import com.codename1.ui.Image;
import com.codename1.ui.Slider;
import com.codename1.ui.TextField;
import com.codename1.ui.animations.CommonTransitions;
import com.codename1.ui.animations.ComponentAnimation;
import com.codename1.ui.events.ActionEvent;
import com.codename1.ui.events.ActionListener;
import com.codename1.ui.geom.Dimension;
import com.codename1.ui.layouts.BorderLayout;
import com.codename1.ui.layouts.FlowLayout;
import com.codename1.ui.layouts.GridLayout;
import com.codename1.ui.layouts.LayeredLayout;
import com.codename1.ui.list.DefaultListModel;
import com.codename1.ui.list.GenericListCellRenderer;
import com.codename1.ui.plaf.Border;
import com.codename1.ui.plaf.Style;
import com.codename1.ui.spinner.Picker;
import com.codename1.ui.util.UIBuilder;
import com.mycompany.CoursServices.CoursServices;
import com.mycompany.CoursServices.usersService;
import com.mycompany.Entities.Cours;
import com.mycompany.Entities.CurrentUser;
import com.mycompany.Entities.Reservation;
import com.mycompany.Entities.users;
import com.mycompany.GUI.AddReservation;
import com.mycompany.GUI.Aff;
import com.mycompany.GUI.ClockDemo;
import com.mycompany.GUI.Demo;
import com.mycompany.GUI.DemoComponent;
import com.mycompany.GUI.Input1;
import com.mycompany.GUI.RatingWidget;

import com.mycompany.GUI.Video;

import com.mycompany.GUI.addCourse;
import com.mycompany.GUI.indexCours;

import java.util.ArrayList;
import java.util.List;

/**
 * This file was generated by <a href="https://www.codenameone.com/">Codename One</a> for the purpose 
 * of building native mobile applications using Java.
 */
public class MyApplication {

    private Form current;
    private Resources theme;
    public static Form mainForm;
    private Button addCourseBtn;
    private Container mainContainer;
    
    private Resources res;
     private Form currentForm;
    private Container tabletSurface;
    private Command gridCommand;
    private Command listCommand;

    private Object imageMask;
    private int maskWidth;
    private int maskHeight;
    private Object circleMask;
    private int circleMaskWidth=190;
    private int circleMaskHeight=190;

    private int[] colors;
    private Image[] colorBottoms;
    private int currentColor;

    public void init(Object context) {
        // use two network threads instead of one
        updateNetworkThreadCount(2);
        res = UIManager.initFirstTheme("/theme_1");
        Toolbar.setGlobalToolbar(true);
        Dialog.setDefaultBlurBackgroundRadius(10);
        Log.bindCrashProtection(false);  
    }
    
    
    
    
    public DemoComponent createDemoButton(Demo d) {
        DemoComponent dc = new DemoComponent(d.getDisplayName(), d.getDemoIcon(), imageMask, 
                maskWidth, maskHeight, colorBottoms[currentColor], 
                circleMask, res.getImage("circle-line.png"), circleMaskWidth, circleMaskHeight,
                "Blank" + (currentColor + 1));
        currentColor++;
        if(currentColor == colorBottoms.length) {
            currentColor = 0;
        }
        dc.addActionListener(e -> {
            if(isTablet()) {
                tabletSurface.getAnimationManager().flushAnimation(() -> {
                    tabletSurface.replace(tabletSurface.getComponentAt(0), d.createDemo(getCurrentForm()), 
                            CommonTransitions.createCover(CommonTransitions.SLIDE_HORIZONTAL, true, 200));
                });
            } else {
                Form previous = getCurrentForm();
                Form f = new Form(d.getDisplayName(), new BorderLayout());
                f.add(CENTER, d.createDemo(f));
                f.getToolbar().setBackCommand(" ", ee -> {
                    if(d.onBack()){
                        previous.showBack();
                    } else {
                    }
                });
                
                f.show();
            }
        });
        return dc;
    }
    
    
    public void showMainUI() {
        final Form f = new Form("Acceuil", new BorderLayout());
        
        
        Demo[] demos = new Demo[] {
//            new Layouts(), new WebServices(), 
            new Input1(),
           new ClockDemo(),
            new Video(),
            
//            new Themes(), new Contacts(),
//            new Input(), 
//            new Video(), new SalesDemo(),,new Input1()
            //new Video(),new ClockDemo()
        };
        
        for(Demo d : demos) {
            d.init(res);
        }

        Image dukeImage = Image.createImage(circleMaskWidth, circleMaskHeight);
        Graphics g = dukeImage.getGraphics();
        g.drawImage(res.getImage("codenameone-icon-background.png"), 0, 0, circleMaskWidth, circleMaskHeight);
        g.drawImage(res.getImage("firas.jpg"), 0,0, circleMaskWidth, circleMaskHeight);
        //dukeImage = dukeImage.applyMask(circleMask);
        Label duke = new Label(dukeImage);
        Label circle = new Label(res.getImage("circle-line.png"));
        Container dukeImageContainer = LayeredLayout.encloseIn(duke, circle);
        Label name = new Label("Firas");
        name.setUIID("DukeName");
        Container dukeContainer = BorderLayout.west(BoxLayout.encloseY(dukeImageContainer, name));
        dukeContainer.setUIID("ProfileContainer");
        
        if(isTablet()) {
            Toolbar.setPermanentSideMenu(true);
            f.getToolbar().addComponentToSideMenu(dukeContainer);
            for(Demo d : demos) {
                f.getToolbar().addComponentToSideMenu(createDemoButton(d));
            }
            tabletSurface = f.getContentPane();
            f.add(CENTER, demos[0].createDemo(f));
            f.show();
            return;
        }
        
        f.getToolbar().addComponentToSideMenu(dukeContainer);
        Style s = UIManager.getInstance().getComponentStyle("Title");
FontImage icon = FontImage.createMaterial(FontImage.MATERIAL_WARNING, s);


        Container cnt;
        if(Preferences.get("gridLayout", true)) {
            GridLayout gl = new GridLayout(1);
            gl.setAutoFit(true);
            gl.setHideZeroSized(true);
            cnt = new Container(gl);
            for(Demo d : demos) {
                cnt.add(createDemoButton(d));
            }
        } else {
            cnt = new Container(BoxLayout.y());
            for(Demo d : demos) {
                cnt.add(createDemoButton(d));
            }
        }
        cnt.setScrollableY(true);
        f.add(CENTER, cnt);
        
        f.getToolbar().addSearchCommand(e -> {
            String t = (String)e.getSource();
            if(t == null) {
                t = "";
            } else {
                t = t.toLowerCase();
            }
            for(Component c : cnt) {
                DemoComponent mb = (DemoComponent)c;
                boolean show = t.length() == 0 || mb.getText().toLowerCase().indexOf(t) > -1;
                mb.setVisible(show);
                mb.setHidden(!show);
            }
            cnt.animateLayout(200);
        }, 3);

        
        
       

        

        
        f.getToolbar().addMaterialCommandToSideMenu("Les Cours", FontImage.MATERIAL_ALBUM, e ->  {
            
            

            Form ff=new Form();
            Container c2=new Container(new BoxLayout(BoxLayout.Y_AXIS));
            List<Cours> cours = new ArrayList<>();
            com.codename1.ui.List uiLibsList = new com.codename1.ui.List();
            ArrayList<String> libsNoms = new ArrayList();

                
            CoursServices ser=new CoursServices(); 
            for (Cours c:ser.getListCours2()) {
                
                String fff=c.getLib();
                String fff1="____________________________________";
                libsNoms.add(fff);
                libsNoms.add(fff1);
                cours.add(c);
            }
            com.codename1.ui.list.DefaultListModel<String> listModel = new com.codename1.ui.list.DefaultListModel<>(libsNoms);
            uiLibsList.setModel(listModel);
            
            uiLibsList.addActionListener(new ActionListener() {
            @Override
                public void actionPerformed(ActionEvent evt) {
                    Cours c = cours.get(uiLibsList.getCurrentSelected());
                    new Aff(String.valueOf(c.getId()),c.getLib(),c.getType(),String.valueOf(c.getSalle()),c.getCoachName(),c.getDate(),String.valueOf(c.getNbPlace())).show();
            }
        });
             c2.add(uiLibsList);  
            ff.add(c2);
            ff.show();
            
            Form previous = getCurrentForm();
                            ff.getToolbar().setBackCommand(" ", ee -> {
                                    previous.showBack();
                            });
        
        });
            
        f.getToolbar().addMaterialCommandToSideMenu("Les RÃ©servations", FontImage.MATERIAL_PERSON, e -> 
                {
                    Form ff=new Form();
                    CoursServices ser1=new CoursServices(); 
                    
                    
                    
                  
          Picker combo1 = new Picker();
            combo1.setStrings(allf());
            combo1.setSelectedString("Cours");
            Container c2=new Container(new BoxLayout(BoxLayout.Y_AXIS));
            
            List<Reservation> reservations = new ArrayList<>();
            com.codename1.ui.List uiLibsList = new com.codename1.ui.List();
            

            ArrayList<String> libsNoms = new ArrayList();
            CoursServices ser=new CoursServices(); 
            for (Reservation c:ser.getListReserva2()) { 
                
                String fff=c.getLib()+"/"+c.getUsername();
                String fff1="__________________________________________________";
                
                
                libsNoms.add(fff);
                libsNoms.add(fff1);
                
                reservations.add(c);
            }
            com.codename1.ui.list.DefaultListModel<String> listModel = new com.codename1.ui.list.DefaultListModel<>(libsNoms);
            uiLibsList.setModel(listModel);
            
            c2.add(combo1);
             c2.add(uiLibsList);  
             
            ff.add(c2);
            ff.show();
            
            Form previous = getCurrentForm();
                            ff.getToolbar().setBackCommand(" ", ee -> {
                                    previous.showBack();
                            });
            
combo1.addActionListener(new ActionListener() {
                        @Override
                        public void actionPerformed(ActionEvent evt) {
                            
                            
                            
                            
                            Form ff=new Form();
                    
                    
                    
          
            Container c2=new Container(new BoxLayout(BoxLayout.Y_AXIS));
            
            
            com.codename1.ui.List uiLibsList1 = new com.codename1.ui.List();
            

            ArrayList<String> libsNoms1 = new ArrayList();
            CoursServices ser=new CoursServices(); 
            for (Reservation c:ser.getListReserva2()) { 
                
                
                if(combo1.getText().equals(c.getLib())){
                String fff2=c.getUsername()+"/"+c.getEmail();
                String fff1="__________________________________________________";
                
                libsNoms1.add(fff2);
                libsNoms1.add(fff1);
                
                }
            }
            com.codename1.ui.list.DefaultListModel<String> listModel = new com.codename1.ui.list.DefaultListModel<>(libsNoms1);
            uiLibsList1.setModel(listModel);
            
             c2.add(uiLibsList1);  
             
            ff.add(c2);
            ff.show();
            
            Form previous = getCurrentForm();
                            ff.getToolbar().setBackCommand(" ", ee -> {
                                    previous.showBack();
                            });
                            
                            
                            
                        }
                    });
             

                
                });
        f.getToolbar().addMaterialCommandToSideMenu("Source Code", FontImage.MATERIAL_WEB, e -> execute("https://github.com/codenameone/KitchenSink"));
        

         f.getToolbar().addMaterialCommandToSideMenu("DÃ©connexion", FontImage.MATERIAL_EXIT_TO_APP, e -> 
                {
                    LoginUI();
                
                });
        
        f.getToolbar().setVisible(false);
        cnt.setVisible(false);
        for(Component c : cnt) {
            c.setVisible(false);
        }
        f.addShowListener(e -> {
            f.getToolbar().setHeight(0);
            f.getToolbar().setVisible(true);
            f.animateLayoutFadeAndWait(200, 100);
            for(Component c : cnt) {
                c.setY(f.getHeight());
                c.setVisible(true);
                c.getUnselectedStyle().setOpacity(100);
            }
            cnt.setVisible(true);
            cnt.animateLayoutFadeAndWait(400, 100);
            f.removeAllShowListeners();
        });
        f.setTransitionInAnimator(CommonTransitions.createEmpty());
        f.show();
    }
    
    
    
     public void showSplashAnimation() {
        Form splash = new Form(new LayeredLayout());
        splash.setUIID("Splash");
        splash.getContentPane().setUIID("Container");
        splash.getToolbar().setUIID("Container");
        ScaleImageLabel iconBackground = new ScaleImageLabel(res.getImage(""));
        iconBackground.setBackgroundType(Style.BACKGROUND_IMAGE_SCALED_FILL);
        Container centerBackground = BorderLayout.center(iconBackground);
        splash.add(centerBackground);
        Label iconForeground = new Label(res.getImage("logo.png").scaledWidth(Math.round(Display.getInstance().getDisplayWidth() / 2)));
        Container centerIcon = BorderLayout.centerAbsolute(iconForeground);
        splash.add(centerIcon);
        
        splash.show();
        callSerially(() -> {
            ((BorderLayout)centerBackground.getLayout()).setCenterBehavior(CENTER_BEHAVIOR_CENTER_ABSOLUTE);
            centerBackground.setShouldCalcPreferredSize(true);
            centerBackground.animateLayoutAndWait(1500);
            
            iconForeground.remove();
            iconBackground.remove();
            centerIcon.remove();
            Container layers = LayeredLayout.encloseIn(
                    new Label(iconBackground.getIcon(), "CenterIcon"), 
                    new Label(iconForeground.getIcon(), "CenterIcon"));
            Container boxy = BoxLayout.encloseY(layers);
            Label placeholder = new Label();
            placeholder.setShowEvenIfBlank(true);
            Label kitchenSink = new Label("Welcome to Ad Fitness", "Ad Fitness");
            Component.setSameHeight(placeholder, kitchenSink);
            Component.setSameWidth(placeholder, kitchenSink, boxy);
            centerBackground.add(CENTER, boxy);
            splash.revalidate();
            callSerially(() -> {
                placeholder.setText(" ");
                boxy.add(placeholder);
                boxy.setShouldCalcPreferredSize(true);
                boxy.getParent().animateLayoutAndWait(2000);
                boxy.replaceAndWait(placeholder, kitchenSink, CommonTransitions.createFade(500));
                
                Label newPlaceholder = new Label(" ");
                Label byCodenameOne = new Label("By Dev-Crew ", "");
                Component.setSameHeight(newPlaceholder, byCodenameOne);
                Component.setSameWidth(newPlaceholder, byCodenameOne);
                boxy.add(newPlaceholder);
                boxy.getParent().animateLayoutAndWait(400);
                boxy.replaceAndWait(newPlaceholder, byCodenameOne, CommonTransitions.createFade(500));
                
                byCodenameOne.setY(splash.getHeight());                
                kitchenSink.setY(splash.getHeight());
                layers.setY(splash.getHeight());
                boxy.setHeight(splash.getHeight());
                
                boxy.animateUnlayoutAndWait(450, 20);
                splash.setTransitionOutAnimator(CommonTransitions.createEmpty());
                
                // create image masks for card effects
                Image mask = res.getImage("card-full.png");
                maskWidth = mask.getWidth();
                maskHeight = mask.getHeight() / 4 * 3;
                Image top = mask.subImage(0, 0, maskWidth, maskHeight, true);
                Image bottom = mask.subImage(0, maskHeight, maskWidth, mask.getHeight() / 4, true);
                imageMask = top.createMask();
                
                Image circleMaskImage = res.getImage("circle.png");
                //circleMask = circleMaskImage.createMask();
                //circleMaskWidth = circleMaskImage.getWidth();
                //circleMaskHeight = circleMaskImage.getHeight();
                
                colorBottoms = new Image[7];
                colors = new int[colorBottoms.length];
                Object bottomMask = bottom.createMask();
                for(int iter = 0 ; iter < colorBottoms.length ; iter++) {
                    colors[iter] = splash.getUIManager().getComponentStyle("Blank" + (iter + 1)).getBgColor();
                    colorBottoms[iter] = Image.createImage(bottom.getWidth(), bottom.getHeight(), 0xff000000 | colors[iter]);
                    colorBottoms[iter] = colorBottoms[iter].applyMask(bottomMask);
                }
            showMainUI1();
               
      
            });
        });
    }
     

    

    
//    private void showMainUI() {
//        Form hi = new Form("Accueil", BoxLayout.y());
//        hi.show();
//        Toolbar tb = hi.getToolbar();
//
//        
//        
//        tb.addMaterialCommandToSideMenu("Gestion de Cours", FontImage.MATERIAL_WEB, new ActionListener() {
//            Form ff=new Form();
//            Container c2=new Container(new BoxLayout(BoxLayout.Y_AXIS));
//            List<Cours> cours = new ArrayList<>();
//            com.codename1.ui.List uiLibsList = new com.codename1.ui.List();
//            ArrayList<String> libsNoms = new ArrayList();
//            @Override
//            public void actionPerformed(ActionEvent evt) {
//                
//            CoursServices ser=new CoursServices(); 
//            for (Cours c:ser.getListCours2()) {  
//                libsNoms.add(c.getLib());
//                cours.add(c);
//            }
//            com.codename1.ui.list.DefaultListModel<String> listModel = new com.codename1.ui.list.DefaultListModel<>(libsNoms);
//            uiLibsList.setModel(listModel);
//            
//            uiLibsList.addActionListener(new ActionListener() {
//            @Override
//                public void actionPerformed(ActionEvent evt) {
//                    Cours c = cours.get(uiLibsList.getCurrentSelected());
//                    new Aff(String.valueOf(c.getId()),c.getLib(),c.getType(),String.valueOf(c.getSalle()),c.getCoachName(),c.getDate(),String.valueOf(c.getNbPlace())).show();
//            }    
//            });
//            ff.getToolbar().addCommandToRightBar("Retour",null,new ActionListener() {
//            @Override
//            public void actionPerformed(ActionEvent evt) {
//                hi.show();
//            }
//        });
//            c2.add(uiLibsList);  
//            ff.add(c2);
//            ff.show();
//        addCourseBtn=new Button("Ajouter Un cours");
//        c2.add(addCourseBtn);
//        addCourseBtn.addActionListener(new ActionListener() {
//            @Override
//            public void actionPerformed(ActionEvent evt) {
//                addCourse addCourse = new addCourse();
//                addCourse.show();
//            }
//        });
//        }
//        });
//        tb.addMaterialCommandToSideMenu("Gestion de Reservation", FontImage.MATERIAL_WEB, new ActionListener() {
//            @Override
//            public void actionPerformed(ActionEvent evt) {
//                Form f=new Form();
//                f=new Form(new BorderLayout());
//                Accordion acc=new Accordion();
//      
//                CoursServices ss=new CoursServices();
//                ArrayList<Cours> listcours = ss.getListCours2();
//
//     
//    for(Cours s : listcours) {
//        SpanLabel sl=new SpanLabel();
//        sl.setText("Libelle : "+s.getLib()+"\n Type :"+s.getType()+"\n Salle :"+s.getSalle()+"\n Nom du coach :"+s.getCoachName()+"\n Date :"+s.getDate()+"\n Nombre de place :"+s.getNbPlace());
//        Button b = new Button("RÃ©server");
//        b.getUnselectedStyle().setFgColor(5542241);
//
//            
//        b.addActionListener(new ActionListener() {
//            @Override
//            public void actionPerformed(ActionEvent evt) {
//                AddReservation a=new AddReservation(s.getLib(),String.valueOf(s.getId()));
//                a.show();   
//                    }
//                });
//            acc.addContent(s.getLib(), BoxLayout.encloseY(sl,b)); 
//        }
//        f.getToolbar().addCommandToRightBar("Retour",null,new ActionListener() {
//            @Override
//            public void actionPerformed(ActionEvent evt) {
//                hi.show();
//                }
//            });
//            f.add(BorderLayout.CENTER, acc);    
//            f.show();
//        
//        }
//            
//        });
//        
//    }
     
    public void start() {
        if(current != null){
            current.show();
            return;
        }
        
        showSplashAnimation();
        
    }
//        Form hi = new Form("Accueil", BoxLayout.y());
//        hi.show();
//        Toolbar tb = hi.getToolbar();
//
//        
//        
//        tb.addMaterialCommandToSideMenu("Gestion de Cours", FontImage.MATERIAL_WEB, new ActionListener() {
//            Form ff=new Form();
//            Container c2=new Container(new BoxLayout(BoxLayout.Y_AXIS));
//            List<Cours> cours = new ArrayList<>();
//            com.codename1.ui.List uiLibsList = new com.codename1.ui.List();
//            ArrayList<String> libsNoms = new ArrayList();
//            @Override
//            public void actionPerformed(ActionEvent evt) {
//                
//            CoursServices ser=new CoursServices(); 
//            for (Cours c:ser.getListCours2()) {  
//                libsNoms.add(c.getLib());
//                cours.add(c);
//            }
//            com.codename1.ui.list.DefaultListModel<String> listModel = new com.codename1.ui.list.DefaultListModel<>(libsNoms);
//            uiLibsList.setModel(listModel);
//            
//            uiLibsList.addActionListener(new ActionListener() {
//            @Override
//                public void actionPerformed(ActionEvent evt) {
//                    Cours c = cours.get(uiLibsList.getCurrentSelected());
//                    new Aff(String.valueOf(c.getId()),c.getLib(),c.getType(),String.valueOf(c.getSalle()),c.getCoachName(),c.getDate(),String.valueOf(c.getNbPlace())).show();
//            }    
//            });
//            ff.getToolbar().addCommandToRightBar("Retour",null,new ActionListener() {
//            @Override
//            public void actionPerformed(ActionEvent evt) {
//                hi.show();
//            }
//        });
//            c2.add(uiLibsList);  
//            ff.add(c2);
//            ff.show();
//        addCourseBtn=new Button("Ajouter Un cours");
//        c2.add(addCourseBtn);
//        addCourseBtn.addActionListener(new ActionListener() {
//            @Override
//            public void actionPerformed(ActionEvent evt) {
//                addCourse addCourse = new addCourse();
//                addCourse.show();
//            }
//        });
//        }
//        });
//        tb.addMaterialCommandToSideMenu("Gestion de Reservation", FontImage.MATERIAL_WEB, new ActionListener() {
//            @Override
//            public void actionPerformed(ActionEvent evt) {
//                Form f=new Form();
//                f=new Form(new BorderLayout());
//                Accordion acc=new Accordion();
//      
//                CoursServices ss=new CoursServices();
//                ArrayList<Cours> listcours = ss.getListCours2();
//
//     
//    for(Cours s : listcours) {
//        SpanLabel sl=new SpanLabel();
//        sl.setText("Libelle : "+s.getLib()+"\n Type :"+s.getType()+"\n Salle :"+s.getSalle()+"\n Nom du coach :"+s.getCoachName()+"\n Date :"+s.getDate()+"\n Nombre de place :"+s.getNbPlace());
//        Button b = new Button("RÃ©server");
//        b.getUnselectedStyle().setFgColor(5542241);
//
//            
//        b.addActionListener(new ActionListener() {
//            @Override
//            public void actionPerformed(ActionEvent evt) {
//                AddReservation a=new AddReservation(s.getLib(),String.valueOf(s.getId()));
//                a.show();   
//                    }
//                });
//            acc.addContent(s.getLib(), BoxLayout.encloseY(sl,b)); 
//        }
//        f.getToolbar().addCommandToRightBar("Retour",null,new ActionListener() {
//            @Override
//            public void actionPerformed(ActionEvent evt) {
//                hi.show();
//                }
//            });
//            f.add(BorderLayout.CENTER, acc);    
//            f.show();
//        
//        }
//            
//        });
       
    
    
 
    public void stop() {
        current = getCurrentForm();
        if(current instanceof Dialog) {
            ((Dialog)current).dispose();
            current = getCurrentForm();
        }
    }
    
    public void destroy() {
    }
    
    private String createListEntry(String name) {
            
            return name;
        }
    
    
    public String[] allf()
     {
         CoursServices ser =new CoursServices();
         int tailleDeLaBoucle =ser.getListCours2().size() ;
         String[] s = new String[tailleDeLaBoucle];
          for (int i = 0; i < tailleDeLaBoucle; i++) {
              s[i] = ser.getListCours2().get(i).getLib();
     }
         return s;
     }
    
    public void LoginUI(){
        
        Form loginform = new Form("Bienvenue");
       SpanLabel lb = new SpanLabel("Veuillez saisir vos coordonnÃ©es");
        
        Container nomm=new Container(BoxLayout.x());
        Label n=new Label("Votre nom");
        TextField nom=new TextField();
        nomm.add(n);
        nomm.add(nom);
        
        
        Container mdpp=new Container(BoxLayout.x());
        Label m= new Label("Mot de passe");
        TextField mdp=new TextField();
        mdpp.add(m); 
        mdpp.add(mdp);

        
     //   erreur=new Label(".");
        Container lesbouttons=new Container(BoxLayout.x());
        Button loginBtn=new Button("login");
        lesbouttons.add(loginBtn);
       // lesbouttons.add(erreur);
//        Button inscriBtn=new Button("mot de passe oubiÃ©?");
//        lesbouttons.add(inscriBtn);

        loginform.add(lb);
        loginform.add(nomm);
        loginform.add(mdpp) ;
        loginform.add(lesbouttons);
     //   loginform.add(erreur);
        
        loginform.show();
        
          // ************************************  L O G I N  ******************************************************************
        
                       usersService aaa=new usersService();
                       CurrentUser test=new CurrentUser();
                                loginBtn.addActionListener(new ActionListener() {
                               @Override
                              public void actionPerformed(ActionEvent evt) {
                                    
                            for (int comp=0;comp<aaa.getListuser().size();comp++)  {
                                System.out.println(aaa.getListuser().get(comp).getNom());
                                System.out.println(aaa.getListuser().get(comp).getMdp());
                              //  System.out.println("photo="+aaa.getListuser().get(comp).getPhoto());
                           if ((aaa.getListuser().get(comp).getNom().equals(nom.getText()))&&(aaa.getListuser().get(comp).getMdp().equals(mdp.getText())))
                           {
                               
                               CurrentUser.id=(aaa.getListuser().get(comp).getId());
                               System.out.println("rrrrrrr"+aaa.getListuser().get(comp).getRole());
                               
                            
                               if(aaa.getListuser().get(comp).getRole().equals("gerant"))
                               {
                                       showMainUI();
                               }
                               else{
                                    showMainUI1();
                               }
                          
                               break ;
                           }
                           else{
                                lb.setText("VÃ©rifier vos donnÃ©es");
                                          
                           }
                       }
            }
        });
 
    }
    
    
    public void showMainUI1() {
        final Form f = new Form("Acceuil", new BorderLayout());
        
        
        Demo[] demos = new Demo[] {
//            new Layouts(), new WebServices(), 
            
           new ClockDemo(),
            new Video(),
            
            
//            new Themes(), new Contacts(),
//            new Input(), 
//            new Video(), new SalesDemo(),,new Input1()
            //new Video(),new ClockDemo()
        };
        
        for(Demo d : demos) {
            d.init(res);
        }

        Image dukeImage = Image.createImage(circleMaskWidth, circleMaskHeight);
        Graphics g = dukeImage.getGraphics();
        g.drawImage(res.getImage("codenameone-icon-background.png"), 0, 0, circleMaskWidth, circleMaskHeight);
        g.drawImage(res.getImage("amine.jpg"), 12,12, circleMaskWidth, circleMaskHeight);
        //dukeImage = dukeImage.applyMask(circleMask);
        Label duke = new Label(dukeImage);
        Label circle = new Label(res.getImage("circle-line.png"));
        Container dukeImageContainer = LayeredLayout.encloseIn(duke, circle);
        Label name = new Label("Amine");
        name.setUIID("DukeName");
        Container dukeContainer = BorderLayout.west(BoxLayout.encloseY(dukeImageContainer, name));
        dukeContainer.setUIID("ProfileContainer");
        
        if(isTablet()) {
            Toolbar.setPermanentSideMenu(true);
            f.getToolbar().addComponentToSideMenu(dukeContainer);
            for(Demo d : demos) {
                f.getToolbar().addComponentToSideMenu(createDemoButton(d));
            }
            tabletSurface = f.getContentPane();
            f.add(CENTER, demos[0].createDemo(f));
            f.show();
            return;
        }
        
        f.getToolbar().addComponentToSideMenu(dukeContainer);
        Style s = UIManager.getInstance().getComponentStyle("Title");
FontImage icon = FontImage.createMaterial(FontImage.MATERIAL_WARNING, s);


        Container cnt;
        if(Preferences.get("gridLayout", true)) {
            GridLayout gl = new GridLayout(1);
            gl.setAutoFit(true);
            gl.setHideZeroSized(true);
            cnt = new Container(gl);
            for(Demo d : demos) {
                cnt.add(createDemoButton(d));
            }
        } else {
            cnt = new Container(BoxLayout.y());
            for(Demo d : demos) {
                cnt.add(createDemoButton(d));
            }
        }
        cnt.setScrollableY(true);
        f.add(CENTER, cnt);
        
        f.getToolbar().addSearchCommand(e -> {
            String t = (String)e.getSource();
            if(t == null) {
                t = "";
            } else {
                t = t.toLowerCase();
            }
            for(Component c : cnt) {
                DemoComponent mb = (DemoComponent)c;
                boolean show = t.length() == 0 || mb.getText().toLowerCase().indexOf(t) > -1;
                mb.setVisible(show);
                mb.setHidden(!show);
            }
            cnt.animateLayout(200);
        }, 3);
  
        f.getToolbar().addMaterialCommandToSideMenu("Cours", FontImage.MATERIAL_PERSON, e -> 
                {

                   indexCours firas=new indexCours();
                   firas.getF().show();

                
                });
        
        f.getToolbar().addMaterialCommandToSideMenu("Mes Reservations", FontImage.MATERIAL_PERSON, e -> 
                {
                    Form ff=new Form();
                     Container c2=new Container(new BoxLayout(BoxLayout.Y_AXIS));
            
            
            com.codename1.ui.List uiLibsList1 = new com.codename1.ui.List();
            

            ArrayList<String> libsNoms1 = new ArrayList();
            CoursServices ser=new CoursServices(); 
            for (Reservation c:ser.getListReserva2()) { 
                
                
                if(c.getUsername().equals("aminekhemiri")){
                String fff2=c.getLib();
                String fff1="__________________________________________________";
                
                libsNoms1.add(fff2);
                libsNoms1.add(fff1);
                
                }
            }
            com.codename1.ui.list.DefaultListModel<String> listModel = new com.codename1.ui.list.DefaultListModel<>(libsNoms1);
            uiLibsList1.setModel(listModel);
            
             c2.add(uiLibsList1);  
             
            ff.add(c2);
            ff.show();
            
            Form previous = getCurrentForm();
                            ff.getToolbar().setBackCommand(" ", ee -> {
                                    previous.showBack();
                            });
                            
                            
                        });
                    
                    
        f.getToolbar().addMaterialCommandToSideMenu("Rate", FontImage.MATERIAL_PERSON, e -> 
                {
                    

                            
  

  


  

                
                });
        f.getToolbar().addMaterialCommandToSideMenu("About", 
                FontImage.MATERIAL_INFO, e -> {
                    Dialog.show("About", "Cette Aplication Mobile est crÃ©Ã©e par Equipe Dev-Crew "
                            + "", "OK", null);
                });
         f.getToolbar().addMaterialCommandToSideMenu("DÃ©connexion", FontImage.MATERIAL_EXIT_TO_APP, e -> 
                {
                    LoginUI();
                
                });
        
        f.getToolbar().setVisible(false);
        cnt.setVisible(false);
        for(Component c : cnt) {
            c.setVisible(false);
        }
        f.addShowListener(e -> {
            f.getToolbar().setHeight(0);
            f.getToolbar().setVisible(true);
            f.animateLayoutFadeAndWait(200, 100);
            for(Component c : cnt) {
                c.setY(f.getHeight());
                c.setVisible(true);
                c.getUnselectedStyle().setOpacity(100);
            }
            cnt.setVisible(true);
            cnt.animateLayoutFadeAndWait(400, 100);
            f.removeAllShowListeners();
        });
        f.setTransitionInAnimator(CommonTransitions.createEmpty());
        f.show();
    }   
        
    }
    


